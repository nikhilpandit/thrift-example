// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hello

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type HelloErrorCode int64

const (
	HelloErrorCode_NOT_FOUND   HelloErrorCode = 1
	HelloErrorCode_OTHER_ERROR HelloErrorCode = 2
)

func (p HelloErrorCode) String() string {
	switch p {
	case HelloErrorCode_NOT_FOUND:
		return "HelloErrorCode_NOT_FOUND"
	case HelloErrorCode_OTHER_ERROR:
		return "HelloErrorCode_OTHER_ERROR"
	}
	return "<UNSET>"
}

func HelloErrorCodeFromString(s string) (HelloErrorCode, error) {
	switch s {
	case "HelloErrorCode_NOT_FOUND":
		return HelloErrorCode_NOT_FOUND, nil
	case "HelloErrorCode_OTHER_ERROR":
		return HelloErrorCode_OTHER_ERROR, nil
	}
	return HelloErrorCode(0), fmt.Errorf("not a valid HelloErrorCode string")
}

func HelloErrorCodePtr(v HelloErrorCode) *HelloErrorCode { return &v }

type Person struct {
	Id        *string  `thrift:"id,1" json:"id"`
	Username  *string  `thrift:"username,2" json:"username"`
	FirstName *string  `thrift:"first_name,3" json:"first_name"`
	LastName  *string  `thrift:"last_name,4" json:"last_name"`
	Age       *int32   `thrift:"age,5" json:"age"`
	Hobbies   []string `thrift:"hobbies,6" json:"hobbies"`
	Team      *Team    `thrift:"team,7" json:"team"`
}

func NewPerson() *Person {
	return &Person{}
}

var Person_Id_DEFAULT string

func (p *Person) GetId() string {
	if !p.IsSetId() {
		return Person_Id_DEFAULT
	}
	return *p.Id
}

var Person_Username_DEFAULT string

func (p *Person) GetUsername() string {
	if !p.IsSetUsername() {
		return Person_Username_DEFAULT
	}
	return *p.Username
}

var Person_FirstName_DEFAULT string

func (p *Person) GetFirstName() string {
	if !p.IsSetFirstName() {
		return Person_FirstName_DEFAULT
	}
	return *p.FirstName
}

var Person_LastName_DEFAULT string

func (p *Person) GetLastName() string {
	if !p.IsSetLastName() {
		return Person_LastName_DEFAULT
	}
	return *p.LastName
}

var Person_Age_DEFAULT int32

func (p *Person) GetAge() int32 {
	if !p.IsSetAge() {
		return Person_Age_DEFAULT
	}
	return *p.Age
}

var Person_Hobbies_DEFAULT []string

func (p *Person) GetHobbies() []string {
	return p.Hobbies
}

var Person_Team_DEFAULT Team

func (p *Person) GetTeam() Team {
	if !p.IsSetTeam() {
		return Person_Team_DEFAULT
	}
	return *p.Team
}
func (p *Person) IsSetId() bool {
	return p.Id != nil
}

func (p *Person) IsSetUsername() bool {
	return p.Username != nil
}

func (p *Person) IsSetFirstName() bool {
	return p.FirstName != nil
}

func (p *Person) IsSetLastName() bool {
	return p.LastName != nil
}

func (p *Person) IsSetAge() bool {
	return p.Age != nil
}

func (p *Person) IsSetHobbies() bool {
	return p.Hobbies != nil
}

func (p *Person) IsSetTeam() bool {
	return p.Team != nil
}

func (p *Person) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Person) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = &v
	}
	return nil
}

func (p *Person) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *Person) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FirstName = &v
	}
	return nil
}

func (p *Person) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.LastName = &v
	}
	return nil
}

func (p *Person) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Age = &v
	}
	return nil
}

func (p *Person) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Hobbies = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.Hobbies = append(p.Hobbies, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Person) ReadField7(iprot thrift.TProtocol) error {
	p.Team = &Team{}
	if err := p.Team.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Team, err)
	}
	return nil
}

func (p *Person) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Person"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Person) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Id)); err != nil {
			return fmt.Errorf("%T.id (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:id: %s", p, err)
		}
	}
	return err
}

func (p *Person) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:username: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return fmt.Errorf("%T.username (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:username: %s", p, err)
		}
	}
	return err
}

func (p *Person) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFirstName() {
		if err := oprot.WriteFieldBegin("first_name", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:first_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.FirstName)); err != nil {
			return fmt.Errorf("%T.first_name (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:first_name: %s", p, err)
		}
	}
	return err
}

func (p *Person) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastName() {
		if err := oprot.WriteFieldBegin("last_name", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:last_name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.LastName)); err != nil {
			return fmt.Errorf("%T.last_name (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:last_name: %s", p, err)
		}
	}
	return err
}

func (p *Person) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAge() {
		if err := oprot.WriteFieldBegin("age", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:age: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Age)); err != nil {
			return fmt.Errorf("%T.age (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:age: %s", p, err)
		}
	}
	return err
}

func (p *Person) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHobbies() {
		if err := oprot.WriteFieldBegin("hobbies", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:hobbies: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Hobbies)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Hobbies {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:hobbies: %s", p, err)
		}
	}
	return err
}

func (p *Person) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTeam() {
		if err := oprot.WriteFieldBegin("team", thrift.STRUCT, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:team: %s", p, err)
		}
		if err := p.Team.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Team, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:team: %s", p, err)
		}
	}
	return err
}

func (p *Person) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Person(%+v)", *p)
}

type Team struct {
	Name   *string `thrift:"name,1" json:"name"`
	Active *bool   `thrift:"active,2" json:"active"`
}

func NewTeam() *Team {
	return &Team{}
}

var Team_Name_DEFAULT string

func (p *Team) GetName() string {
	if !p.IsSetName() {
		return Team_Name_DEFAULT
	}
	return *p.Name
}

var Team_Active_DEFAULT bool

func (p *Team) GetActive() bool {
	if !p.IsSetActive() {
		return Team_Active_DEFAULT
	}
	return *p.Active
}
func (p *Team) IsSetName() bool {
	return p.Name != nil
}

func (p *Team) IsSetActive() bool {
	return p.Active != nil
}

func (p *Team) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Team) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Team) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Active = &v
	}
	return nil
}

func (p *Team) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Team"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Team) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return fmt.Errorf("%T.name (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:name: %s", p, err)
		}
	}
	return err
}

func (p *Team) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:active: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Active)); err != nil {
			return fmt.Errorf("%T.active (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:active: %s", p, err)
		}
	}
	return err
}

func (p *Team) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Team(%+v)", *p)
}

type HelloError struct {
	ErrorCode    HelloErrorCode `thrift:"error_code,1" json:"error_code"`
	ErrorMessage string         `thrift:"error_message,2" json:"error_message"`
}

func NewHelloError() *HelloError {
	return &HelloError{}
}

func (p *HelloError) GetErrorCode() HelloErrorCode {
	return p.ErrorCode
}

func (p *HelloError) GetErrorMessage() string {
	return p.ErrorMessage
}
func (p *HelloError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HelloError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := HelloErrorCode(v)
		p.ErrorCode = temp
	}
	return nil
}

func (p *HelloError) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *HelloError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HelloError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HelloError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:error_code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.error_code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:error_code: %s", p, err)
	}
	return err
}

func (p *HelloError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_message", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:error_message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
		return fmt.Errorf("%T.error_message (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:error_message: %s", p, err)
	}
	return err
}

func (p *HelloError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloError(%+v)", *p)
}

func (p *HelloError) Error() string {
	return p.String()
}
